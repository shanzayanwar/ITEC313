import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.*;
import javafx.stage.Stage;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

public class FibonacciFilterApp extends Application {

    private TextArea outputArea;
    private Spinner<Integer> lengthSpinner;
    private CheckBox evenFilter;
    private CheckBox divisibleBy5Filter;

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage primaryStage) {
        primaryStage.setTitle("Fibonacci Generator");

        // Spinner for sequence length
        lengthSpinner = new Spinner<>(30, 50, 30);
        lengthSpinner.setEditable(true);

        // Filters
        evenFilter = new CheckBox("Even Numbers");
        divisibleBy5Filter = new CheckBox("Divisible by 5");

        // Button
        Button generateButton = new Button("Fib Gen");
        generateButton.setOnAction(e -> generateFibonacci());

        // Output area
        outputArea = new TextArea();
        outputArea.setEditable(false);
        outputArea.setWrapText(true);

        // Layout
        VBox filtersBox = new VBox(10, evenFilter, divisibleBy5Filter);
        filtersBox.setPadding(new Insets(10));

        HBox controlsBox = new HBox(15,
                new Label("Length:"), lengthSpinner,
                filtersBox,
                generateButton
        );
        controlsBox.setPadding(new Insets(10));

        VBox root = new VBox(10, controlsBox, outputArea);
        root.setPadding(new Insets(10));

        Scene scene = new Scene(root, 600, 400);
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    private void generateFibonacci() {
        int length = lengthSpinner.getValue();
        List<Long> sequence = new ArrayList<>();

        long a = 0, b = 1;
        for (int i = 0; i < length; i++) {
            sequence.add(a);
            long next = a + b;
            a = b;
            b = next;
        }

        // Apply filters
        if (evenFilter.isSelected()) {
            sequence = sequence.stream()
                    .filter(n -> n % 2 == 0)
                    .collect(Collectors.toList());
        }

        if (divisibleBy5Filter.isSelected()) {
            sequence = sequence.stream()
                    .filter(n -> n % 5 == 0)
                    .collect(Collectors.toList());
        }

        // Display result
        outputArea.setText(sequence.stream()
                .map(String::valueOf)
                .collect(Collectors.joining(", "))
        );
    }
}
