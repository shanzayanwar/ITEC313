import javafx.application.Application;
import javafx.stage.FileChooser;
import javafx.stage.Stage;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.VBox;

import java.io.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class SortingFromFile extends Application {

    private static final int RUNS = 100; // run each sort 100 times

    @Override
    public void start(Stage primaryStage) {
        Label title = new Label("Sorting Algorithm Comparison");
        title.setStyle("-fx-font-size: 16px; -fx-font-weight: bold;");

        Button uploadButton = new Button("Upload File");
        TextArea output = new TextArea();
        output.setEditable(false);

        uploadButton.setOnAction(e -> {
            FileChooser fileChooser = new FileChooser();
            fileChooser.setTitle("Select File with Integers");
            File file = fileChooser.showOpenDialog(primaryStage);

            if (file != null) {
                try {
                    // Read integers from file
                    List<Integer> dataList = new ArrayList<>();
                    BufferedReader reader = new BufferedReader(new FileReader(file));
                    String line;
                    while ((line = reader.readLine()) != null) {
                        dataList.add(Integer.parseInt(line.trim()));
                    }
                    reader.close();
                    int[] data = dataList.stream().mapToInt(Integer::intValue).toArray();

                    output.clear();
                    output.appendText("File loaded successfully! Number of integers: " + data.length + "\n");
                    output.appendText("Running sorting algorithms 100 times each...\n\n");

                    // Measure average times
                    double bubbleTime = measureAverageTime(data, this::bubbleSort);
                    double mergeTime = measureAverageTime(data, this::mergeSort);
                    double quickTime = measureAverageTime(data, this::quickSort);

                    // Show results
                    output.appendText("Average Sorting Times (100 runs):\n");
                    output.appendText(String.format("Bubble Sort : %.4f seconds\n", bubbleTime));
                    output.appendText(String.format("Merge Sort  : %.4f seconds\n", mergeTime));
                    output.appendText(String.format("Quick Sort  : %.4f seconds\n", quickTime));

                } catch (Exception ex) {
                    output.setText("Error reading file: " + ex.getMessage());
                }
            }
        });

        VBox layout = new VBox(10, title, uploadButton, output);
        layout.setStyle("-fx-padding: 20; -fx-font-size: 14px;");
        Scene scene = new Scene(layout, 500, 400);
        primaryStage.setTitle("Sorting Algorithms from File");
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    // Run sorting algorithm multiple times and compute average
    private double measureAverageTime(int[] arr, SortAlgorithm algorithm) {
        double total = 0;
        for (int i = 0; i < RUNS; i++) {
            int[] copy = Arrays.copyOf(arr, arr.length);
            long start = System.nanoTime();
            algorithm.sort(copy);
            long end = System.nanoTime();
            total += (end - start) / 1e9; // convert to seconds
        }
        return total / RUNS;
    }

    // --- Sorting Algorithms ---

    // Bubble Sort
    private void bubbleSort(int[] arr) {
        int n = arr.length;
        for (int i = 0; i < n - 1; i++) {
            for (int j = 0; j < n - i - 1; j++) {
                if (arr[j] > arr[j + 1]) {
                    int temp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = temp;
                }
            }
        }
    }

    // Merge Sort
    private void mergeSort(int[] arr) {
        if (arr.length <= 1) return;
        int mid = arr.length / 2;
        int[] left = Arrays.copyOfRange(arr, 0, mid);
        int[] right = Arrays.copyOfRange(arr, mid, arr.length);
        mergeSort(left);
        mergeSort(right);
        merge(arr, left, right);
    }

    private void merge(int[] arr, int[] left, int[] right) {
        int i = 0, j = 0, k = 0;
        while (i < left.length && j < right.length) {
            if (left[i] <= right[j]) arr[k++] = left[i++];
            else arr[k++] = right[j++];
        }
        while (i < left.length) arr[k++] = left[i++];
        while (j < right.length) arr[k++] = right[j++];
    }

    // Quick Sort
    private void quickSort(int[] arr) {
        quickSortHelper(arr, 0, arr.length - 1);
    }

    private void quickSortHelper(int[] arr, int low, int high) {
        if (low < high) {
            int pi = partition(arr, low, high);
            quickSortHelper(arr, low, pi - 1);
            quickSortHelper(arr, pi + 1, high);
        }
    }

    private int partition(int[] arr, int low, int high) {
        int pivot = arr[high];
        int i = low - 1;
        for (int j = low; j < high; j++) {
            if (arr[j] <= pivot) {
                i++;
                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
        }
        int temp = arr[i + 1];
        arr[i + 1] = arr[high];
        arr[high] = temp;
        return i + 1;
    }

    interface SortAlgorithm {
        void sort(int[] arr);
    }

    public static void main(String[] args) {
        launch(args);
    }
}
